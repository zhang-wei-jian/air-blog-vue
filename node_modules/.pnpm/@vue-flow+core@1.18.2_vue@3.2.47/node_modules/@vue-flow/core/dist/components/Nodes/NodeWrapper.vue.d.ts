import type { GraphNode, HandleConnectable, NodeComponent } from '../../types'
declare const _default: import('vue').DefineComponent<
  __VLS_TypePropsToRuntimeProps<{
    id: string
    draggable: boolean
    selectable: boolean
    connectable: HandleConnectable
    focusable: boolean
    type: NodeComponent | Function | Object | false
    name: string
    node: GraphNode
    resizeObserver: ResizeObserver
  }>,
  {},
  unknown,
  {},
  {},
  import('vue').ComponentOptionsMixin,
  import('vue').ComponentOptionsMixin,
  {},
  string,
  import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps,
  Readonly<
    import('vue').ExtractPropTypes<
      __VLS_TypePropsToRuntimeProps<{
        id: string
        draggable: boolean
        selectable: boolean
        connectable: HandleConnectable
        focusable: boolean
        type: NodeComponent | Function | Object | false
        name: string
        node: GraphNode
        resizeObserver: ResizeObserver
      }>
    >
  >,
  {}
>
export default _default
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T
type __VLS_TypePropsToRuntimeProps<T> = {
  [K in keyof T]-?: {} extends Pick<T, K>
    ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>
      }
    : {
        type: import('vue').PropType<T[K]>
        required: true
      }
}
