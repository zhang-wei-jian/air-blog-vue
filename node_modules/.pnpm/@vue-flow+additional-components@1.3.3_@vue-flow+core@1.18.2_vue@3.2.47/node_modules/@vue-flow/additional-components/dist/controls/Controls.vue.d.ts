import type { ControlProps } from './types'
declare const _default: {
  new (...args: any[]): {
    $: import('vue').ComponentInternalInstance
    $data: {}
    $props: Partial<{}> &
      Omit<
        Readonly<import('vue').ExtractPropTypes<__VLS_TypePropsToRuntimeProps<ControlProps>>> & {
          onZoomIn?: (() => any) | undefined
          onZoomOut?: (() => any) | undefined
          onFitView?: (() => any) | undefined
          onInteractionChange?: ((active: boolean) => any) | undefined
        } & import('vue').VNodeProps &
          import('vue').AllowedComponentProps &
          import('vue').ComponentCustomProps,
        never
      >
    $attrs: {
      [x: string]: unknown
    }
    $refs: {
      [x: string]: unknown
    }
    $slots: Readonly<{
      [name: string]: import('vue').Slot | undefined
    }>
    $root:
      | import('vue').ComponentPublicInstance<
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          false,
          import('vue').ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>
        >
      | null
    $parent:
      | import('vue').ComponentPublicInstance<
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          false,
          import('vue').ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>
        >
      | null
    $emit: ((event: 'zoomIn') => void) &
      ((event: 'zoomOut') => void) &
      ((event: 'fitView') => void) &
      ((event: 'interactionChange', active: boolean) => void)
    $el: any
    $options: import('vue').ComponentOptionsBase<
      Readonly<import('vue').ExtractPropTypes<__VLS_TypePropsToRuntimeProps<ControlProps>>> & {
        onZoomIn?: (() => any) | undefined
        onZoomOut?: (() => any) | undefined
        onFitView?: (() => any) | undefined
        onInteractionChange?: ((active: boolean) => any) | undefined
      },
      {},
      unknown,
      {},
      {},
      import('vue').ComponentOptionsMixin,
      import('vue').ComponentOptionsMixin,
      {
        zoomIn: () => void
      } & {
        zoomOut: () => void
      } & {
        fitView: () => void
      } & {
        interactionChange: (active: boolean) => void
      },
      string,
      {}
    > & {
      beforeCreate?: ((() => void) | (() => void)[]) | undefined
      created?: ((() => void) | (() => void)[]) | undefined
      beforeMount?: ((() => void) | (() => void)[]) | undefined
      mounted?: ((() => void) | (() => void)[]) | undefined
      beforeUpdate?: ((() => void) | (() => void)[]) | undefined
      updated?: ((() => void) | (() => void)[]) | undefined
      activated?: ((() => void) | (() => void)[]) | undefined
      deactivated?: ((() => void) | (() => void)[]) | undefined
      beforeDestroy?: ((() => void) | (() => void)[]) | undefined
      beforeUnmount?: ((() => void) | (() => void)[]) | undefined
      destroyed?: ((() => void) | (() => void)[]) | undefined
      unmounted?: ((() => void) | (() => void)[]) | undefined
      renderTracked?: (((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[]) | undefined
      renderTriggered?: (((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[]) | undefined
      errorCaptured?:
        | (
            | ((
                err: unknown,
                instance:
                  | import('vue').ComponentPublicInstance<
                      {},
                      {},
                      {},
                      {},
                      {},
                      {},
                      {},
                      {},
                      false,
                      import('vue').ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>
                    >
                  | null,
                info: string,
              ) => boolean | void)
            | ((
                err: unknown,
                instance:
                  | import('vue').ComponentPublicInstance<
                      {},
                      {},
                      {},
                      {},
                      {},
                      {},
                      {},
                      {},
                      false,
                      import('vue').ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>
                    >
                  | null,
                info: string,
              ) => boolean | void)[]
          )
        | undefined
    }
    $forceUpdate: () => void
    $nextTick: typeof import('vue').nextTick
    $watch(
      source: string | Function,
      cb: Function,
      options?: import('vue').WatchOptions<boolean> | undefined,
    ): import('vue').WatchStopHandle
  } & Readonly<import('vue').ExtractPropTypes<__VLS_TypePropsToRuntimeProps<ControlProps>>> & {
      onZoomIn?: (() => any) | undefined
      onZoomOut?: (() => any) | undefined
      onFitView?: (() => any) | undefined
      onInteractionChange?: ((active: boolean) => any) | undefined
    } & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties
  __isFragment?: undefined
  __isTeleport?: undefined
  __isSuspense?: undefined
} & import('vue').ComponentOptionsBase<
  Readonly<import('vue').ExtractPropTypes<__VLS_TypePropsToRuntimeProps<ControlProps>>> & {
    onZoomIn?: (() => any) | undefined
    onZoomOut?: (() => any) | undefined
    onFitView?: (() => any) | undefined
    onInteractionChange?: ((active: boolean) => any) | undefined
  },
  {},
  unknown,
  {},
  {},
  import('vue').ComponentOptionsMixin,
  import('vue').ComponentOptionsMixin,
  {
    zoomIn: () => void
  } & {
    zoomOut: () => void
  } & {
    fitView: () => void
  } & {
    interactionChange: (active: boolean) => void
  },
  string,
  {}
> &
  import('vue').VNodeProps &
  import('vue').AllowedComponentProps &
  import('vue').ComponentCustomProps &
  (new () => {
    $slots: {
      'top': (_: {}) => any
      'control-zoom-in': (_: {}) => any
      'icon-zoom-in': (_: {}) => any
      'control-zoom-out': (_: {}) => any
      'icon-zoom-out': (_: {}) => any
      'control-fit-view': (_: {}) => any
      'icon-fit-view': (_: {}) => any
      'control-interactive': (_: {}) => any
      'icon-unlock': (_: {}) => any
      'icon-lock': (_: {}) => any
      'default': (_: {}) => any
    }
  })
export default _default
declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T
declare type __VLS_TypePropsToRuntimeProps<T> = {
  [K in keyof T]-?: {} extends Pick<T, K>
    ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>
      }
    : {
        type: import('vue').PropType<T[K]>
        required: true
      }
}
